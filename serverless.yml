service: ${file(env-${self:provider.stage}.json):project_name}
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    API_URL: ${file(env-${self:provider.stage}.json):external_api_url}
    DB_TABLE: ${file(env-${self:provider.stage}.json):datatable_name}
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: 
          - ${file(env-${self:provider.stage}.json):dynamo_db_arn}

plugins:
  - serverless-offline

functions:
  listPlanets:
    handler: index.listPlanets
    events:
      - http: 
          path: planetas
          method: GET
  showPlanet:
    handler: index.showPlanet
    events:
      - http: 
          path: planetas/{id}
          method: GET
  listBooks:
    handler: index.listBooks
    timeout: 30
    events:
      - http:
          path: libros
          method: GET
  createBook:
    handler: index.createBook
    timeout: 30
    events:
      - http:
          path: libros
          method: POST
resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

